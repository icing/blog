<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="494" onload="init(evt)" viewBox="0 0 1200 494" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#f8f8f8" offset="5%" />
		<stop stop-color="#e8e8e8" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;
		if (currentSearchTerm === null) return;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="494.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >curl, HTTP/2 200 downloads</text>
<text id="subtitle" x="600.00" y="48" >1 connection, 50 max parallel, https://localhost, 10MB resource</text>
<text id="details" x="10.00" y="477" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="477" > </text>
<g id="frames">
<g >
<title>libsystem_kernel.dylib`__recvfrom (56 samples, 38.62%)</title><rect x="164.6" y="61" width="455.7" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="167.62" y="71.5" >libsystem_kernel.dylib`__recvfrom</text>
</g>
<g >
<title>libssl.3.dylib`tls_read_record (68 samples, 46.90%)</title><rect x="99.5" y="173" width="553.4" height="15.0" fill="rgb(206,206,61)" rx="2" ry="2" />
<text  x="102.52" y="183.5" >libssl.3.dylib`tls_read_record</text>
</g>
<g >
<title>libsystem_kernel.dylib`_mach_continuous_time (1 samples, 0.69%)</title><rect x="75.1" y="237" width="8.1" height="15.0" fill="rgb(200,200,59)" rx="2" ry="2" />
<text  x="78.10" y="247.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`Curl_multi_getsock (1 samples, 0.69%)</title><rect x="831.9" y="333" width="8.2" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="834.93" y="343.5" ></text>
</g>
<g >
<title>libssl.3.dylib`tls_release_record (1 samples, 0.69%)</title><rect x="652.9" y="173" width="8.1" height="15.0" fill="rgb(207,207,61)" rx="2" ry="2" />
<text  x="655.90" y="183.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2 samples, 1.38%)</title><rect x="742.4" y="77" width="16.3" height="15.0" fill="rgb(227,227,69)" rx="2" ry="2" />
<text  x="745.41" y="87.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`fputc_wrapper (1 samples, 0.69%)</title><rect x="34.4" y="269" width="8.2" height="15.0" fill="rgb(202,202,59)" rx="2" ry="2" />
<text  x="37.41" y="279.5" ></text>
</g>
<g >
<title>libnghttp2.14.dylib`session_inbound_frame_reset (1 samples, 0.69%)</title><rect x="783.1" y="253" width="8.1" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text  x="786.10" y="263.5" ></text>
</g>
<g >
<title>libssl.3.dylib`wpacket_intern_close (2 samples, 1.38%)</title><rect x="123.9" y="109" width="16.3" height="15.0" fill="rgb(196,196,57)" rx="2" ry="2" />
<text  x="126.93" y="119.5" ></text>
</g>
<g >
<title>curl`tool_write_cb (5 samples, 3.45%)</title><rect x="718.0" y="125" width="40.7" height="15.0" fill="rgb(221,221,67)" rx="2" ry="2" />
<text  x="721.00" y="135.5" >cur..</text>
</g>
<g >
<title>libcurl.4.dylib`cf_socket_data_pending (1 samples, 0.69%)</title><rect x="831.9" y="301" width="8.2" height="15.0" fill="rgb(192,192,56)" rx="2" ry="2" />
<text  x="834.93" y="311.5" ></text>
</g>
<g >
<title>libssl.3.dylib`WPACKET_finish (2 samples, 1.38%)</title><rect x="123.9" y="125" width="16.3" height="15.0" fill="rgb(204,204,60)" rx="2" ry="2" />
<text  x="126.93" y="135.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`multi_runsingle (95 samples, 65.52%)</title><rect x="58.8" y="349" width="773.1" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="61.83" y="359.5" >libcurl.4.dylib`multi_runsingle</text>
</g>
<g >
<title>libcurl.4.dylib`curl_mvaprintf (1 samples, 0.69%)</title><rect x="42.6" y="237" width="8.1" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="45.55" y="247.5" ></text>
</g>
<g >
<title>libcrypto.3.dylib`ossl_sa_doall_arg (1 samples, 0.69%)</title><rect x="840.1" y="269" width="8.1" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="843.07" y="279.5" ></text>
</g>
<g >
<title>libcrypto.3.dylib`aesni_ctr32_ghash_6x (42 samples, 28.97%)</title><rect x="848.2" y="429" width="341.8" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="851.21" y="439.5" >libcrypto.3.dylib`aesni_ctr32_ghash_6x</text>
</g>
<g >
<title>libcurl.4.dylib`on_data_chunk_recv (8 samples, 5.52%)</title><rect x="718.0" y="253" width="65.1" height="15.0" fill="rgb(181,181,52)" rx="2" ry="2" />
<text  x="721.00" y="263.5" >libcurl..</text>
</g>
<g >
<title>libcurl.4.dylib`Curl_multi_mark_dirty (1 samples, 0.69%)</title><rect x="58.8" y="333" width="8.2" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="61.83" y="343.5" ></text>
</g>
<g >
<title>libcrypto.3.dylib`OPENSSL_LH_doall (1 samples, 0.69%)</title><rect x="840.1" y="237" width="8.1" height="15.0" fill="rgb(189,189,55)" rx="2" ry="2" />
<text  x="843.07" y="247.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`Curl_pgrsUpdate (1 samples, 0.69%)</title><rect x="75.1" y="317" width="8.1" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="78.10" y="327.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`ossl_recv (77 samples, 53.10%)</title><rect x="91.4" y="237" width="626.6" height="15.0" fill="rgb(206,206,61)" rx="2" ry="2" />
<text  x="94.38" y="247.5" >libcurl.4.dylib`ossl_recv</text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (1 samples, 0.69%)</title><rect x="10.0" y="221" width="8.1" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="13.00" y="231.5" ></text>
</g>
<g >
<title>libsystem_c.dylib`__cxa_finalize_ranges (1 samples, 0.69%)</title><rect x="840.1" y="349" width="8.1" height="15.0" fill="rgb(227,227,69)" rx="2" ry="2" />
<text  x="843.07" y="359.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`nw_in_reader (77 samples, 53.10%)</title><rect x="91.4" y="269" width="626.6" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="94.38" y="279.5" >libcurl.4.dylib`nw_in_reader</text>
</g>
<g >
<title>dyld`start (103 samples, 71.03%)</title><rect x="10.0" y="429" width="838.2" height="15.0" fill="rgb(188,188,54)" rx="2" ry="2" />
<text  x="13.00" y="439.5" >dyld`start</text>
</g>
<g >
<title>libcurl.4.dylib`Curl_set_in_callback (1 samples, 0.69%)</title><rect x="758.7" y="125" width="8.1" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="761.69" y="135.5" ></text>
</g>
<g >
<title>libssl.3.dylib`WPACKET_put_bytes__ (1 samples, 0.69%)</title><rect x="140.2" y="125" width="8.1" height="15.0" fill="rgb(217,217,65)" rx="2" ry="2" />
<text  x="143.21" y="135.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`ssl_cf_recv (77 samples, 53.10%)</title><rect x="91.4" y="253" width="626.6" height="15.0" fill="rgb(211,211,63)" rx="2" ry="2" />
<text  x="94.38" y="263.5" >libcurl.4.dylib`ssl_cf_recv</text>
</g>
<g >
<title>libcurl.4.dylib`curl_multi_poll (1 samples, 0.69%)</title><rect x="831.9" y="365" width="8.2" height="15.0" fill="rgb(180,180,52)" rx="2" ry="2" />
<text  x="834.93" y="375.5" ></text>
</g>
<g >
<title>curl`ourWriteOutJSON (5 samples, 3.45%)</title><rect x="10.0" y="333" width="40.7" height="15.0" fill="rgb(205,205,60)" rx="2" ry="2" />
<text  x="13.00" y="343.5" >cur..</text>
</g>
<g >
<title>curl`main (102 samples, 70.34%)</title><rect x="10.0" y="413" width="830.1" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="13.00" y="423.5" >curl`main</text>
</g>
<g >
<title>libsystem_c.dylib`fwrite (5 samples, 3.45%)</title><rect x="718.0" y="109" width="40.7" height="15.0" fill="rgb(202,202,59)" rx="2" ry="2" />
<text  x="721.00" y="119.5" >lib..</text>
</g>
<g >
<title>libssl.3.dylib`SSL_read (75 samples, 51.72%)</title><rect x="91.4" y="221" width="610.3" height="15.0" fill="rgb(226,226,68)" rx="2" ry="2" />
<text  x="94.38" y="231.5" >libssl.3.dylib`SSL_read</text>
</g>
<g >
<title>libcurl.4.dylib`ossl_bio_cf_in_read (56 samples, 38.62%)</title><rect x="164.6" y="77" width="455.7" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="167.62" y="87.5" >libcurl.4.dylib`ossl_bio_cf_in_read</text>
</g>
<g >
<title>libcurl.4.dylib`curl_mfprintf (1 samples, 0.69%)</title><rect x="10.0" y="301" width="8.1" height="15.0" fill="rgb(196,196,57)" rx="2" ry="2" />
<text  x="13.00" y="311.5" ></text>
</g>
<g >
<title>curl`post_per_transfer (5 samples, 3.45%)</title><rect x="10.0" y="365" width="40.7" height="15.0" fill="rgb(200,200,59)" rx="2" ry="2" />
<text  x="13.00" y="375.5" >cur..</text>
</g>
<g >
<title>libsystem_kernel.dylib`poll (1 samples, 0.69%)</title><rect x="831.9" y="269" width="8.2" height="15.0" fill="rgb(210,210,62)" rx="2" ry="2" />
<text  x="834.93" y="279.5" ></text>
</g>
<g >
<title>libcrypto.3.dylib`BIO_read (57 samples, 39.31%)</title><rect x="156.5" y="125" width="463.8" height="15.0" fill="rgb(216,216,65)" rx="2" ry="2" />
<text  x="159.48" y="135.5" >libcrypto.3.dylib`BIO_read</text>
</g>
<g >
<title>libcurl.4.dylib`set_url (1 samples, 0.69%)</title><rect x="42.6" y="301" width="8.1" height="15.0" fill="rgb(213,213,63)" rx="2" ry="2" />
<text  x="45.55" y="311.5" ></text>
</g>
<g >
<title>libcrypto.3.dylib`bio_read_intern (57 samples, 39.31%)</title><rect x="156.5" y="109" width="463.8" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="159.48" y="119.5" >libcrypto.3.dylib`bio_read_intern</text>
</g>
<g >
<title>libsystem_kernel.dylib`poll (5 samples, 3.45%)</title><rect x="791.2" y="269" width="40.7" height="15.0" fill="rgb(210,210,62)" rx="2" ry="2" />
<text  x="794.24" y="279.5" >lib..</text>
</g>
<g >
<title>libcurl.4.dylib`cf_socket_data_pending (5 samples, 3.45%)</title><rect x="791.2" y="301" width="40.7" height="15.0" fill="rgb(192,192,56)" rx="2" ry="2" />
<text  x="794.24" y="311.5" >lib..</text>
</g>
<g >
<title>libcurl.4.dylib`Curl_socket_check (5 samples, 3.45%)</title><rect x="791.2" y="285" width="40.7" height="15.0" fill="rgb(225,225,68)" rx="2" ry="2" />
<text  x="794.24" y="295.5" >lib..</text>
</g>
<g >
<title>libcurl.4.dylib`h2_progress_ingress (87 samples, 60.00%)</title><rect x="83.2" y="301" width="708.0" height="15.0" fill="rgb(191,191,55)" rx="2" ry="2" />
<text  x="86.24" y="311.5" >libcurl.4.dylib`h2_progress_ingress</text>
</g>
<g >
<title>dyld`dyld4::LibSystemHelpersWrapper::exit (1 samples, 0.69%)</title><rect x="840.1" y="413" width="8.1" height="15.0" fill="rgb(181,181,52)" rx="2" ry="2" />
<text  x="843.07" y="423.5" ></text>
</g>
<g >
<title>libcrypto.3.dylib`CRYPTO_THREAD_get_local (1 samples, 0.69%)</title><rect x="701.7" y="189" width="8.2" height="15.0" fill="rgb(213,213,64)" rx="2" ry="2" />
<text  x="704.72" y="199.5" ></text>
</g>
<g >
<title>libsystem_c.dylib`clock_gettime_nsec_np (1 samples, 0.69%)</title><rect x="75.1" y="269" width="8.1" height="15.0" fill="rgb(188,188,54)" rx="2" ry="2" />
<text  x="78.10" y="279.5" ></text>
</g>
<g >
<title>libsystem_c.dylib`__sflush (3 samples, 2.07%)</title><rect x="718.0" y="77" width="24.4" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="721.00" y="87.5" >l..</text>
</g>
<g >
<title>libcrypto.3.dylib`get_error_values (1 samples, 0.69%)</title><rect x="701.7" y="205" width="8.2" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="704.72" y="215.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`Curl_uint_bset_next (1 samples, 0.69%)</title><rect x="50.7" y="349" width="8.1" height="15.0" fill="rgb(185,185,53)" rx="2" ry="2" />
<text  x="53.69" y="359.5" ></text>
</g>
<g >
<title>libsystem_c.dylib`funlockfile (1 samples, 0.69%)</title><rect x="10.0" y="237" width="8.1" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text  x="13.00" y="247.5" ></text>
</g>
<g >
<title>libssl.3.dylib`tls13_cipher (5 samples, 3.45%)</title><rect x="107.7" y="141" width="40.6" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="110.66" y="151.5" >lib..</text>
</g>
<g >
<title>libcrypto.3.dylib`alg_cleanup (1 samples, 0.69%)</title><rect x="840.1" y="253" width="8.1" height="15.0" fill="rgb(188,188,54)" rx="2" ry="2" />
<text  x="843.07" y="263.5" ></text>
</g>
<g >
<title>libssl.3.dylib`ossl_ssl_get_error (1 samples, 0.69%)</title><rect x="701.7" y="221" width="8.2" height="15.0" fill="rgb(191,191,55)" rx="2" ry="2" />
<text  x="704.72" y="231.5" ></text>
</g>
<g >
<title>libcrypto.3.dylib`ossl_method_store_free (1 samples, 0.69%)</title><rect x="840.1" y="285" width="8.1" height="15.0" fill="rgb(219,219,66)" rx="2" ry="2" />
<text  x="843.07" y="295.5" ></text>
</g>
<g >
<title>libssl.3.dylib`ssl3_read_internal (75 samples, 51.72%)</title><rect x="91.4" y="205" width="610.3" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="94.38" y="215.5" >libssl.3.dylib`ssl3_read_internal</text>
</g>
<g >
<title>libcurl.4.dylib`Curl_socket_check (1 samples, 0.69%)</title><rect x="831.9" y="285" width="8.2" height="15.0" fill="rgb(225,225,68)" rx="2" ry="2" />
<text  x="834.93" y="295.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`curl_mfprintf (3 samples, 2.07%)</title><rect x="18.1" y="301" width="24.5" height="15.0" fill="rgb(196,196,57)" rx="2" ry="2" />
<text  x="21.14" y="311.5" >l..</text>
</g>
<g >
<title>libcurl.4.dylib`ssl_cf_data_pending (5 samples, 3.45%)</title><rect x="791.2" y="317" width="40.7" height="15.0" fill="rgb(202,202,59)" rx="2" ry="2" />
<text  x="794.24" y="327.5" >lib..</text>
</g>
<g >
<title>libcurl.4.dylib`cw_raw_write (1 samples, 0.69%)</title><rect x="766.8" y="205" width="8.2" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="769.83" y="215.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`formatf (3 samples, 2.07%)</title><rect x="18.1" y="285" width="24.5" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="21.14" y="295.5" >l..</text>
</g>
<g >
<title>curl`ourWriteOut (5 samples, 3.45%)</title><rect x="10.0" y="349" width="40.7" height="15.0" fill="rgb(181,181,52)" rx="2" ry="2" />
<text  x="13.00" y="359.5" >cur..</text>
</g>
<g >
<title>libnghttp2.14.dylib`nghttp2_session_mem_recv2 (9 samples, 6.21%)</title><rect x="718.0" y="269" width="73.2" height="15.0" fill="rgb(183,183,53)" rx="2" ry="2" />
<text  x="721.00" y="279.5" >libnghtt..</text>
</g>
<g >
<title>libssl.3.dylib`WPACKET_allocate_bytes (1 samples, 0.69%)</title><rect x="140.2" y="109" width="8.1" height="15.0" fill="rgb(216,216,64)" rx="2" ry="2" />
<text  x="143.21" y="119.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`Curl_conn_data_pending (1 samples, 0.69%)</title><rect x="67.0" y="317" width="8.1" height="15.0" fill="rgb(181,181,52)" rx="2" ry="2" />
<text  x="69.97" y="327.5" ></text>
</g>
<g >
<title>libsystem_c.dylib`fputc (1 samples, 0.69%)</title><rect x="10.0" y="253" width="8.1" height="15.0" fill="rgb(221,221,66)" rx="2" ry="2" />
<text  x="13.00" y="263.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`Curl_xfer_write_resp (8 samples, 5.52%)</title><rect x="718.0" y="237" width="65.1" height="15.0" fill="rgb(181,181,52)" rx="2" ry="2" />
<text  x="721.00" y="247.5" >libcurl..</text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (1 samples, 0.69%)</title><rect x="840.1" y="221" width="8.1" height="15.0" fill="rgb(194,194,56)" rx="2" ry="2" />
<text  x="843.07" y="231.5" ></text>
</g>
<g >
<title>curl`writeString (4 samples, 2.76%)</title><rect x="18.1" y="317" width="32.6" height="15.0" fill="rgb(227,227,69)" rx="2" ry="2" />
<text  x="21.14" y="327.5" >cu..</text>
</g>
<g >
<title>libcrypto.3.dylib`ossl_lib_ctx_default_deinit (1 samples, 0.69%)</title><rect x="840.1" y="317" width="8.1" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="843.07" y="327.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`cw_out_do_write (6 samples, 4.14%)</title><rect x="718.0" y="157" width="48.8" height="15.0" fill="rgb(189,189,55)" rx="2" ry="2" />
<text  x="721.00" y="167.5" >libc..</text>
</g>
<g >
<title>libsystem_c.dylib`exit (1 samples, 0.69%)</title><rect x="840.1" y="365" width="8.1" height="15.0" fill="rgb(190,190,55)" rx="2" ry="2" />
<text  x="843.07" y="375.5" ></text>
</g>
<g >
<title>libssl.3.dylib`ssl3_read (1 samples, 0.69%)</title><rect x="709.9" y="221" width="8.1" height="15.0" fill="rgb(227,227,68)" rx="2" ry="2" />
<text  x="712.86" y="231.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`Curl_bufq_sipn (78 samples, 53.79%)</title><rect x="83.2" y="285" width="634.8" height="15.0" fill="rgb(229,229,69)" rx="2" ry="2" />
<text  x="86.24" y="295.5" >libcurl.4.dylib`Curl_bufq_sipn</text>
</g>
<g >
<title>libcurl.4.dylib`ssl_cf_data_pending (1 samples, 0.69%)</title><rect x="831.9" y="317" width="8.2" height="15.0" fill="rgb(202,202,59)" rx="2" ry="2" />
<text  x="834.93" y="327.5" ></text>
</g>
<g >
<title>libcrypto.3.dylib`aesni_encrypt (1 samples, 0.69%)</title><rect x="115.8" y="61" width="8.1" height="15.0" fill="rgb(178,178,51)" rx="2" ry="2" />
<text  x="118.79" y="71.5" ></text>
</g>
<g >
<title>libcrypto.3.dylib`OPENSSL_cleanup (1 samples, 0.69%)</title><rect x="840.1" y="333" width="8.1" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text  x="843.07" y="343.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`formatf (1 samples, 0.69%)</title><rect x="10.0" y="285" width="8.1" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="13.00" y="295.5" ></text>
</g>
<g >
<title>libsystem_kernel.dylib`mach_continuous_time (1 samples, 0.69%)</title><rect x="75.1" y="253" width="8.1" height="15.0" fill="rgb(215,215,64)" rx="2" ry="2" />
<text  x="78.10" y="263.5" ></text>
</g>
<g >
<title>libdyld.dylib`dyld4::LibSystemHelpers::exit (1 samples, 0.69%)</title><rect x="840.1" y="381" width="8.1" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="843.07" y="391.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`Curl_sendrecv (94 samples, 64.83%)</title><rect x="67.0" y="333" width="764.9" height="15.0" fill="rgb(179,179,51)" rx="2" ry="2" />
<text  x="69.97" y="343.5" >libcurl.4.dylib`Curl_sendrecv</text>
</g>
<g >
<title>libcrypto.3.dylib`bread_conv (57 samples, 39.31%)</title><rect x="156.5" y="93" width="463.8" height="15.0" fill="rgb(212,212,63)" rx="2" ry="2" />
<text  x="159.48" y="103.5" >libcrypto.3.dylib`bread_conv</text>
</g>
<g >
<title>libssl.3.dylib`tls_default_read_n (62 samples, 42.76%)</title><rect x="148.3" y="141" width="504.6" height="15.0" fill="rgb(225,225,68)" rx="2" ry="2" />
<text  x="151.34" y="151.5" >libssl.3.dylib`tls_default_read_n</text>
</g>
<g >
<title>libcrypto.3.dylib`CRYPTO_gcm128_setiv (1 samples, 0.69%)</title><rect x="107.7" y="61" width="8.1" height="15.0" fill="rgb(220,220,66)" rx="2" ry="2" />
<text  x="110.66" y="71.5" ></text>
</g>
<g >
<title>libssl.3.dylib`ssl3_read_bytes (75 samples, 51.72%)</title><rect x="91.4" y="189" width="610.3" height="15.0" fill="rgb(201,201,59)" rx="2" ry="2" />
<text  x="94.38" y="199.5" >libssl.3.dylib`ssl3_read_bytes</text>
</g>
<g >
<title>libcurl.4.dylib`h2_process_pending_input (9 samples, 6.21%)</title><rect x="718.0" y="285" width="73.2" height="15.0" fill="rgb(216,216,65)" rx="2" ry="2" />
<text  x="721.00" y="295.5" >libcurl...</text>
</g>
<g >
<title>libsystem_platform.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.69%)</title><rect x="132.1" y="93" width="8.1" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="135.07" y="103.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`fputc_wrapper (1 samples, 0.69%)</title><rect x="10.0" y="269" width="8.1" height="15.0" fill="rgb(202,202,59)" rx="2" ry="2" />
<text  x="13.00" y="279.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`formatf (1 samples, 0.69%)</title><rect x="42.6" y="221" width="8.1" height="15.0" fill="rgb(209,209,62)" rx="2" ry="2" />
<text  x="45.55" y="231.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`multi_wait (1 samples, 0.69%)</title><rect x="831.9" y="349" width="8.2" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text  x="834.93" y="359.5" ></text>
</g>
<g >
<title>libsystem_c.dylib`clock_gettime (1 samples, 0.69%)</title><rect x="75.1" y="285" width="8.1" height="15.0" fill="rgb(195,195,57)" rx="2" ry="2" />
<text  x="78.10" y="295.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`curl_maprintf (1 samples, 0.69%)</title><rect x="42.6" y="253" width="8.1" height="15.0" fill="rgb(177,177,50)" rx="2" ry="2" />
<text  x="45.55" y="263.5" ></text>
</g>
<g >
<title>libsystem_c.dylib`fputc (1 samples, 0.69%)</title><rect x="34.4" y="253" width="8.2" height="15.0" fill="rgb(221,221,66)" rx="2" ry="2" />
<text  x="37.41" y="263.5" ></text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 3.45%)</title><rect x="661.0" y="173" width="40.7" height="15.0" fill="rgb(227,227,69)" rx="2" ry="2" />
<text  x="664.03" y="183.5" >lib..</text>
</g>
<g >
<title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 2.76%)</title><rect x="620.3" y="125" width="32.6" height="15.0" fill="rgb(227,227,69)" rx="2" ry="2" />
<text  x="623.34" y="135.5" >li..</text>
</g>
<g >
<title>libsystem_malloc.dylib`free (1 samples, 0.69%)</title><rect x="783.1" y="237" width="8.1" height="15.0" fill="rgb(203,203,60)" rx="2" ry="2" />
<text  x="786.10" y="247.5" ></text>
</g>
<g >
<title>all (145 samples, 100%)</title><rect x="10.0" y="445" width="1180.0" height="15.0" fill="rgb(184,184,53)" rx="2" ry="2" />
<text  x="13.00" y="455.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`out_number (1 samples, 0.69%)</title><rect x="42.6" y="205" width="8.1" height="15.0" fill="rgb(180,180,51)" rx="2" ry="2" />
<text  x="45.55" y="215.5" ></text>
</g>
<g >
<title>libssl.3.dylib`tls_get_more_records (68 samples, 46.90%)</title><rect x="99.5" y="157" width="553.4" height="15.0" fill="rgb(182,182,52)" rx="2" ry="2" />
<text  x="102.52" y="167.5" >libssl.3.dylib`tls_get_more_records</text>
</g>
<g >
<title>libcurl.4.dylib`parseurl_and_replace (1 samples, 0.69%)</title><rect x="42.6" y="285" width="8.1" height="15.0" fill="rgb(199,199,58)" rx="2" ry="2" />
<text  x="45.55" y="295.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`cf_h2_recv (87 samples, 60.00%)</title><rect x="83.2" y="317" width="708.0" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="86.24" y="327.5" >libcurl.4.dylib`cf_h2_recv</text>
</g>
<g >
<title>libcurl.4.dylib`cw_out_write (6 samples, 4.14%)</title><rect x="718.0" y="173" width="48.8" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="721.00" y="183.5" >libc..</text>
</g>
<g >
<title>libcrypto.3.dylib`context_deinit_objs (1 samples, 0.69%)</title><rect x="840.1" y="301" width="8.1" height="15.0" fill="rgb(183,183,53)" rx="2" ry="2" />
<text  x="843.07" y="311.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`cw_download_write (6 samples, 4.14%)</title><rect x="718.0" y="205" width="48.8" height="15.0" fill="rgb(210,210,63)" rx="2" ry="2" />
<text  x="721.00" y="215.5" >libc..</text>
</g>
<g >
<title>libcurl.4.dylib`curl_multi_perform (96 samples, 66.21%)</title><rect x="50.7" y="365" width="781.2" height="15.0" fill="rgb(188,188,54)" rx="2" ry="2" />
<text  x="53.69" y="375.5" >libcurl.4.dylib`curl_multi_perform</text>
</g>
<g >
<title>libsystem_c.dylib`flockfile (1 samples, 0.69%)</title><rect x="34.4" y="237" width="8.2" height="15.0" fill="rgb(205,205,60)" rx="2" ry="2" />
<text  x="37.41" y="247.5" ></text>
</g>
<g >
<title>libcrypto.3.dylib`EVP_DecryptFinal_ex (1 samples, 0.69%)</title><rect x="99.5" y="141" width="8.2" height="15.0" fill="rgb(186,186,54)" rx="2" ry="2" />
<text  x="102.52" y="151.5" ></text>
</g>
<g >
<title>curl`operate (102 samples, 70.34%)</title><rect x="10.0" y="397" width="830.1" height="15.0" fill="rgb(176,176,50)" rx="2" ry="2" />
<text  x="13.00" y="407.5" >curl`operate</text>
</g>
<g >
<title>libcurl.4.dylib`curlx_now (1 samples, 0.69%)</title><rect x="75.1" y="301" width="8.1" height="15.0" fill="rgb(195,195,57)" rx="2" ry="2" />
<text  x="78.10" y="311.5" ></text>
</g>
<g >
<title>libsystem_c.dylib`__sfvwrite (5 samples, 3.45%)</title><rect x="718.0" y="93" width="40.7" height="15.0" fill="rgb(221,221,66)" rx="2" ry="2" />
<text  x="721.00" y="103.5" >lib..</text>
</g>
<g >
<title>libcrypto.3.dylib`ossl_gcm_stream_update (2 samples, 1.38%)</title><rect x="107.7" y="109" width="16.2" height="15.0" fill="rgb(180,180,52)" rx="2" ry="2" />
<text  x="110.66" y="119.5" ></text>
</g>
<g >
<title>dyld`dyld4::start(dyld4::KernelArgs*, void*, void*)::$_0::operator() (1 samples, 0.69%)</title><rect x="840.1" y="397" width="8.1" height="15.0" fill="rgb(216,216,64)" rx="2" ry="2" />
<text  x="843.07" y="407.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`Curl_client_write (7 samples, 4.83%)</title><rect x="718.0" y="221" width="57.0" height="15.0" fill="rgb(196,196,57)" rx="2" ry="2" />
<text  x="721.00" y="231.5" >libcur..</text>
</g>
<g >
<title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (1 samples, 0.69%)</title><rect x="34.4" y="221" width="8.2" height="15.0" fill="rgb(193,193,56)" rx="2" ry="2" />
<text  x="37.41" y="231.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`cw_out_ptr_flush (6 samples, 4.14%)</title><rect x="718.0" y="141" width="48.8" height="15.0" fill="rgb(202,202,60)" rx="2" ry="2" />
<text  x="721.00" y="151.5" >libc..</text>
</g>
<g >
<title>curl`writeLong (1 samples, 0.69%)</title><rect x="10.0" y="317" width="8.1" height="15.0" fill="rgb(218,218,65)" rx="2" ry="2" />
<text  x="13.00" y="327.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`cw_pause_write (6 samples, 4.14%)</title><rect x="718.0" y="189" width="48.8" height="15.0" fill="rgb(187,187,54)" rx="2" ry="2" />
<text  x="721.00" y="199.5" >libc..</text>
</g>
<g >
<title>libcrypto.3.dylib`ossl_gcm_setiv (2 samples, 1.38%)</title><rect x="107.7" y="77" width="16.2" height="15.0" fill="rgb(229,229,69)" rx="2" ry="2" />
<text  x="110.66" y="87.5" ></text>
</g>
<g >
<title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.69%)</title><rect x="123.9" y="93" width="8.2" height="15.0" fill="rgb(227,227,69)" rx="2" ry="2" />
<text  x="126.93" y="103.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`parse_authority (1 samples, 0.69%)</title><rect x="42.6" y="269" width="8.1" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="45.55" y="279.5" ></text>
</g>
<g >
<title>libcrypto.3.dylib`EVP_DecryptUpdate (2 samples, 1.38%)</title><rect x="107.7" y="125" width="16.2" height="15.0" fill="rgb(197,197,58)" rx="2" ry="2" />
<text  x="110.66" y="135.5" ></text>
</g>
<g >
<title>libcrypto.3.dylib`gcm_cipher_internal (2 samples, 1.38%)</title><rect x="107.7" y="93" width="16.2" height="15.0" fill="rgb(198,198,58)" rx="2" ry="2" />
<text  x="110.66" y="103.5" ></text>
</g>
<g >
<title>libcurl.4.dylib`cw_raw_write (1 samples, 0.69%)</title><rect x="775.0" y="221" width="8.1" height="15.0" fill="rgb(208,208,62)" rx="2" ry="2" />
<text  x="777.97" y="231.5" ></text>
</g>
<g >
<title>curl`run_all_transfers (102 samples, 70.34%)</title><rect x="10.0" y="381" width="830.1" height="15.0" fill="rgb(175,175,50)" rx="2" ry="2" />
<text  x="13.00" y="391.5" >curl`run_all_transfers</text>
</g>
<g >
<title>libsystem_kernel.dylib`__write_nocancel (3 samples, 2.07%)</title><rect x="718.0" y="61" width="24.4" height="15.0" fill="rgb(227,227,68)" rx="2" ry="2" />
<text  x="721.00" y="71.5" >l..</text>
</g>
</g>
</svg>
